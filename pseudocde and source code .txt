// Phonebook Application Pseudocode

// 1. Add Contact Algorithm
FUNCTION addContact(name, phone)
    IF name IS NOT EMPTY AND phone IS NOT EMPTY
        IF NOT isDuplicateContact(name, phone, null, null)
            contact = "Name: " + name + ", Phone: " + phone
            ADD contact TO contactListModel
            CALL sortContacts()
            CLEAR nameField AND phoneField
            DISPLAY "Contact successfully added."
        ELSE
            DISPLAY "This contact already exists. Please enter a unique name and phone number."
        END IF
    ELSE
        DISPLAY "Please enter both name and phone number."
    END IF
END FUNCTION

// 2. View Contacts Algorithm
FUNCTION viewContacts()
    IF contactListModel IS EMPTY
        DISPLAY "No contacts to display."
    END IF
END FUNCTION

// 3. Search Contacts Algorithm
FUNCTION searchContacts(searchTerm)
    SET results TO EMPTY STRING
    SET found TO FALSE

    FOR EACH contact IN contactListModel
        IF contact CONTAINS searchTerm (case-insensitive)
            APPEND contact TO results
            SET found TO TRUE
        END IF
    END FOR

    IF found
        DISPLAY results IN contactList
    ELSE
        DISPLAY "Contact not found."
    END IF
END FUNCTION

// 4. Delete Contact Algorithm
FUNCTION deleteContact()
    SET selectedContact TO SELECTED contact FROM contactList

    IF selectedContact IS NOT NULL
        PROMPT USER TO CONFIRM "Are you sure you want to delete the selected contact?"
        IF USER CONFIRMS
            REMOVE selectedContact FROM contactListModel
            DISPLAY "Contact deleted successfully."
        END IF
    ELSE
        DISPLAY "Please select a contact to delete."
    END IF
END FUNCTION

// 5. Update Contact Algorithm
FUNCTION updateContact()
    SET selectedContact TO SELECTED contact FROM contactList

    IF selectedContact IS NOT NULL
        PARSE selectedContact TO currentName, currentPhone

        PROMPT newName FROM USER WITH DEFAULT currentName
        PROMPT newPhone FROM USER WITH DEFAULT currentPhone

        IF newName IS NOT NULL AND newPhone IS NOT NULL
            IF NOT isDuplicateContact(newName, newPhone, currentName, currentPhone)
                updatedContact = "Name: " + newName + ", Phone: " + newPhone
                UPDATE contactListModel AT selected index WITH updatedContact
                DISPLAY "Contact updated successfully."
            ELSE
                DISPLAY "This contact already exists. Please enter a unique name and phone number."
            END IF
        END IF
    ELSE
        DISPLAY "Please select a contact to update."
    END IF
END FUNCTION

// 6. Check for Duplicate Contact Algorithm
FUNCTION isDuplicateContact(name, phone, originalName, originalPhone)
    FOR EACH contact IN contactListModel
        PARSE contact TO existingName, existingPhone

        IF originalName IS NOT NULL AND existingName EQUALS originalName AND existingPhone EQUALS originalPhone
            CONTINUE (skip this contact)
        END IF

        IF existingName EQUALS name (case-insensitive) OR existingPhone EQUALS phone
            RETURN TRUE (duplicate found)
        END IF
    END FOR

    RETURN FALSE (no duplicates found)
END FUNCTION

// 7. Sort Contacts Algorithm
FUNCTION sortContacts()
    CREATE an EMPTY LIST called contactListArray

    FOR EACH contact IN contactListModel
        ADD contact TO contactListArray
    END FOR

    SORT contactListArray IN alphabetical order

    CLEAR contactListModel
    FOR EACH contact IN contactListArray
        ADD contact TO contactListModel
    END FOR
END FUNCTION










 package phonebook;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.util.ArrayList;
import java.util.Collections;

public class Phonebook implements ActionListener {

    JFrame frame;
    JTextArea nameField, phoneField, searchField;
    JList<String> contactList;
    DefaultListModel<String> contactListModel;
    JButton addButton, viewButton, searchButton, deleteButton, updateButton;

    public Phonebook() {
        // Frame setup
        frame = new JFrame("Phonebook - Revamped");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new FlowLayout());

        // Fields and Buttons
        nameField = new JTextArea("Enter Name", 1, 15);
        phoneField = new JTextArea("Enter Phone", 1, 15);
        searchField = new JTextArea("Search Contacts", 1, 15);
        
        addButton = new JButton("Add");
        viewButton = new JButton("View");
        searchButton = new JButton("Search");
        deleteButton = new JButton("Delete");
        updateButton = new JButton("Update");

        // Adding action listeners
        addButton.addActionListener(this);
        viewButton.addActionListener(this);
        searchButton.addActionListener(this);
        deleteButton.addActionListener(this);
        updateButton.addActionListener(this);

        // Input validation
        nameField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (!Character.isLetter(e.getKeyChar()) && !Character.isWhitespace(e.getKeyChar())) {
                    e.consume(); // Ignore non-letter input
                }
            }
        });

        phoneField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (!Character.isDigit(e.getKeyChar())) {
                    e.consume(); // Ignore non-digit input
                }
            }
        });

        // Contact List setup
        contactListModel = new DefaultListModel<>();
        contactList = new JList<>(contactListModel);
        contactList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(contactList);

        // Layout additions
        frame.add(nameField);
        frame.add(phoneField);
        frame.add(searchField);
        frame.add(addButton);
        frame.add(viewButton);
        frame.add(searchButton);
        frame.add(deleteButton);
        frame.add(updateButton);
        frame.add(scrollPane);

        frame.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addButton) {
            String name = nameField.getText().trim();
            String phone = phoneField.getText().trim();
            if (!name.isEmpty() && !phone.isEmpty()) {
                if (!isDuplicateContact(name, phone, "", "")) {
                    String contact = "Name: " + name + ", Phone: " + phone;
                    contactListModel.addElement(contact);
                    sortContacts();
                    nameField.setText("");
                    phoneField.setText("");
                    JOptionPane.showMessageDialog(frame, "Contact successfully added.");
                } else {
                    JOptionPane.showMessageDialog(frame, "This contact already exists.");
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Please enter both name and phone number.");
            }
        } else if (e.getSource() == viewButton) {
            if (contactListModel.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "No contacts to display.");
            }
        } else if (e.getSource() == searchButton) {
            String search = searchField.getText().trim();
            if (!search.isEmpty()) {
                searchContact(search);
            } else {
                JOptionPane.showMessageDialog(frame, "Please enter a name or phone number to search.");
            }
        } else if (e.getSource() == deleteButton) {
            String selectedContact = contactList.getSelectedValue();
            if (selectedContact != null) {
                int response = JOptionPane.showConfirmDialog(frame,
                        "Are you sure you want to delete this contact?", "Confirm Delete",
                        JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) {
                    contactListModel.removeElement(selectedContact);
                    JOptionPane.showMessageDialog(frame, "Contact deleted successfully.");
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Please select a contact to delete.");
            }
        } else if (e.getSource() == updateButton) {
            String selectedContact = contactList.getSelectedValue();
            if (selectedContact != null) {
                String[] parts = selectedContact.split(", ");
                String currentName = parts[0].substring(6);
                String currentPhone = parts[1].substring(7);

                String newName = JOptionPane.showInputDialog(frame, "Edit Name:", currentName);
                String newPhone = JOptionPane.showInputDialog(frame, "Edit Phone:", currentPhone);

                if (newName != null && newPhone != null && !newName.isEmpty() && !newPhone.isEmpty()) {
                    // Pass current contact details to avoid checking them in the duplicate check
                    if (!isDuplicateContact(newName, newPhone, currentName, currentPhone)) {
                        String updatedContact = "Name: " + newName + ", Phone: " + newPhone;
                        contactListModel.setElementAt(updatedContact, contactList.getSelectedIndex());
                        JOptionPane.showMessageDialog(frame, "Contact updated successfully.");
                    } else {
                        JOptionPane.showMessageDialog(frame, "This contact already exists.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Please select a contact to update.");
            }
        }
    }

    private boolean isDuplicateContact(String name, String phone, String currentName, String currentPhone) {
        for (int i = 0; i < contactListModel.size(); i++) {
            String contact = contactListModel.get(i);
            String[] parts = contact.split(", ");
            String existingName = parts[0].substring(6);
            String existingPhone = parts[1].substring(7);

            // Skip checking if this is the current contact being updated
            if (existingName.equalsIgnoreCase(currentName) && existingPhone.equals(currentPhone)) {
                continue;
            }

            // Check for duplicates
            if (existingName.equalsIgnoreCase(name) || existingPhone.equals(phone)) {
                return true;
            }
        }
        return false;
    }

    private void sortContacts() {
        ArrayList<String> contactListArray = new ArrayList<>();
        for (int i = 0; i < contactListModel.size(); i++) {
            contactListArray.add(contactListModel.get(i));
        }
        Collections.sort(contactListArray);
        contactListModel.clear();
        contactListArray.forEach(contactListModel::addElement);
    }

    private void searchContact(String search) {
        DefaultListModel<String> searchResults = new DefaultListModel<>();
        boolean found = false;
        for (int i = 0; i < contactListModel.size(); i++) {
            String contact = contactListModel.get(i);
            if (contact.toLowerCase().contains(search.toLowerCase())) {
                searchResults.addElement(contact);
                found = true;
            }
        }
        if (found) {
            contactList.setModel(searchResults);
        } else {
            JOptionPane.showMessageDialog(frame, "No matching contacts found.");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Phonebook::new);
    }
}
